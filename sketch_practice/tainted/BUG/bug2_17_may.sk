#define NUMVARS 3

adt expr{
    Num {int val;}
    Var {int id;}
    Plus {expr left; expr right;}
}

adt state{
	Retval {int ret; bit[NUMVARS] tainted;}
}

bit[NUMVARS] bor(bit[NUMVARS] x, bit[NUMVARS] y){
	bit[NUMVARS] res;
	for(int i=0;i<NUMVARS;i++){
		res[i] = (x[i] || y[i]);
	}
	return res;
}
bit[NUMVARS] false_arr(){
	bit[NUMVARS] res;
	for(int i=0;i<NUMVARS;i++){
		res[i] = false;
	}
	return res;
}


Retval interpret(expr e, int[NUMVARS] context){
	switch(e){
		case Num: {
			return new Retval(ret=e.val,tainted=false_arr());
		}
		case Var: {
			bit[NUMVARS] tainted_arr = false_arr();
			tainted_arr[e.id] = true;
			return new Retval(ret=context[e.id],tainted=tainted_arr);
		}
        case Plus: {
			Retval left = interpret(e.left,context);
        	Retval right = interpret(e.right,context);
			return new Retval(ret=left.ret + right.ret,tainted=bor(left.tainted,right.tainted));
        }
	}
}




bit is_eq(expr e1, expr e2){
	switch(e1){
		case Num: {
			switch(e2){
				case Num: return e1.val == e2.val;
				default: return false;
			}
		}
		case Var: {
			switch(e2){
				case Var: return e1.id == e2.id;
				default: return false;
			}
		}
		case Plus: {
			switch(e2){
				case Plus: return is_eq(e1.left,e2.left) && is_eq(e1.right,e2.right);
				default: return false;
			}
		}
	}
}

harness void synthesize(){
	expr e=??(2);
	
	Retval r = interpret(e, {1,3,5});
	assert(r.tainted[0] == true);
	assert(r.tainted[1] == true);
	//assert(r.tainted[2] == true);
	assert( r.ret == 9); //input-output example

	expr e1 = new Plus(left=new Var(id=1),right=new Plus(left=new Var(id=0),right=new Var(id=2)));
	
	Retval r1 = interpret(e1, {1,3,5});
	assert(r1.tainted[0] == true);
	assert(r1.tainted[1] == true);
	assert(r1.tainted[2] == true);
	assert( r1.ret == 9); //input-output example

	assert(is_eq(e,e1));

}
