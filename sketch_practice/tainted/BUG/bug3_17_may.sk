#define NUMVARS 3


#define TAINTED1 bit t0;
#define TAINTED2 TAINTED1 bit t1;
#define TAINTED3 TAINTED2 bit t2;
#define TAINTED4 TAINTED3 bit t3;
#define TAINTED5 TAINTED4 bit t4;
#define TAINTED6 TAINTED5 bit t5;

#define TAINTED_DEF(n) TAINTED##n 


#define M_REPEAT_1 bit t0;
#define M_REPEAT_2 M_REPEAT_1 bit t1;
#define M_REPEAT_3 M_REPEAT_2 bit t2;
#define M_REPEAT_4 M_REPEAT_3 bit t3;
#define M_REPEAT_5 X M_REPEAT_4(X)
#define M_REPEAT_6 M_REPEAT_3(X) M_REPEAT_3(X)

#define M_EXPAND(...) __VA_ARGS__

#define M_REPEAT__(N, X) M_EXPAND(M_REPEAT_ ## N)(X)
#define M_REPEAT_(N, X) M_REPEAT__(N, X)
#define M_REPEAT(N, X) M_REPEAT_(M_EXPAND(N), X)

adt expr{
    Num {int val;}
    Var {int id;}
    Plus {expr left; expr right;}
}

adt state{
	Retval {int ret; bit t0; bit t1; bit t2;}
}

Retval interpret(expr e, int[NUMVARS] context){
	switch(e){
		case Num: {
			return new Retval(ret=e.val,t0=false,t1=false,t2=false);
		}
		case Var: {
			bit lt0 = (e.id==0);
			bit lt1 = (e.id==1);
			bit lt2 = (e.id==2);			
			return new Retval(ret=context[e.id],t0=lt0,t1=lt1,t2=lt2);
		}
        case Plus: {
			Retval left = interpret(e.left,context);
        	Retval right = interpret(e.right,context);
        	bit lt0 = left.t0 || right.t0;
			bit lt1 = left.t1 || right.t1;
			bit lt2 = left.t2 || right.t2;	
			return new Retval(ret=left.ret + right.ret,t0=lt0,t1=lt1,t2=lt2);
        }
	}
}




bit is_eq(expr e1, expr e2){
	switch(e1){
		case Num: {
			switch(e2){
				case Num: return e1.val == e2.val;
				default: return false;
			}
		}
		case Var: {
			switch(e2){
				case Var: return e1.id == e2.id;
				default: return false;
			}
		}
		case Plus: {
			switch(e2){
				case Plus: return is_eq(e1.left,e2.left) && is_eq(e1.right,e2.right);
				default: return false;
			}
		}
	}
}

harness void synthesize(){
	expr e=??(2);
	
	Retval r = interpret(e, {1,3,5});
	assert(r.t0 == true);
	assert(r.t1 == true);
	//assert(r.t2 == true);
	assert( r.ret == 9); //input-output example

	expr e1 = new Plus(left=new Var(id=1),right=new Plus(left=new Var(id=0),right=new Var(id=2)));
	
	Retval r1 = interpret(e1, {1,3,5});
	assert(r1.t0 == true);
	assert(r1.t1 == true);
	assert(r1.t2 == true);
	assert( r1.ret == 9); //input-output example

	assert(is_eq(e,e1));

}
