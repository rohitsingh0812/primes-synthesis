#define NUMVARS 3
#define NODECUTOFF 12
#define GENCALL(XX) gen_e(XX,num_nodes,cif, clt, cnum, cvar, cplus,cmult)
void PRINT_CONST(int x);
void PRINT_VAR(int id);
void PRINT_PLUS();
void PRINT_MULT();
void PRINT_LT();
void PRINT_IF();
adt expr{
    Var {int id;}
    Plus {expr left; expr right;}
}

adt state{
	Retval {int ret; bit[NUMVARS] tainted;}
}

bit[NUMVARS] bor(bit[NUMVARS] x, bit[NUMVARS] y){
	bit[NUMVARS] res;
	for(int i=0;i<NUMVARS;i++){
		res[i] = (x[i] | y[i]);
	}
	return res;
}
bit[NUMVARS] false_arr(){
	bit[NUMVARS] res;
	for(int i=0;i<NUMVARS;i++){
		res[i] = false;
	}
	return res;
}
bit is_true(bit[NUMVARS] x){
	for(int i=0;i<NUMVARS;i++){
		if(x[i] == false) return false;
	}
	return true;
}
bit is_eq(expr e1, expr e2){
	switch(e1){
		case Var: {
			switch(e2){
				case Var: return e1.id == e2.id;
				default: return false;
			}
		}
		case Plus: {
			switch(e2){
				case Plus: return is_eq(e1.left,e2.left) && is_eq(e1.right,e2.right);
				default: return false;
			}
		}
	}
}


Retval interpret(expr e, int[NUMVARS] context){
	switch(e){
		case Var: {
			bit[NUMVARS] tainted_arr = false_arr();
			tainted_arr[e.id] = true;
			return new Retval(ret=context[e.id],tainted=tainted_arr);
		}
        case Plus: {
        	Retval left = interpret(e.left,context);
        	Retval right = interpret(e.right,context);
			return new Retval(ret=left.ret + right.ret,tainted=bor(left.tainted,right.tainted));
        }
	}
}

generator expr gen_e(int depth, ref int num_nodes, ref int cif, ref int clt, ref int cnum, ref int cvar, ref int cplus, ref int cmult){
    assert(depth >= 0);
    assert(num_nodes <= NODECUTOFF);
    int stop = ??;
    if(depth == 0 || stop > 0){
        int id = (??)%NUMVARS;
        PRINT_VAR(id);
        cvar++;
        return new Var(id=id);
    }
    else{
        PRINT_PLUS();
        num_nodes+=2;
        cplus++;
        return new Plus(left=GENCALL(depth-1),right=GENCALL(depth-1));        
    }
}



harness void synthesize(){
    int nn = 0;
    int cif=0;int clt=0;int cnum=0;int cvar=0; int cplus = 0;int cmult=0;
	/*expr e = gen_e(2,nn,cif, clt, cnum, cvar,cplus,cmult); //AST of depth 2
	//print_int(nn);
	//assert(cif == 1);
	//assert(clt == 1);
	assert(cnum <= 0);
	assert(cvar ==3);
	assert(cplus==2);
	//assert (nn == 5);*/
	expr e = ??(2);
	Retval r = interpret(e, {1,3,5});
	assert( r.ret == 9); //input-output example
	//assert(is_true(r.tainted));
	assert(r.tainted[0] == true);
	assert(r.tainted[1] == true);
	assert(r.tainted[2] == true);
	expr e1 = new Plus(left=new Var(id=1),right=new Plus(left=new Var(id=0),right=new Var(id=2)));
	assert(is_eq(e,e1));

	/*r = interpret(NUMVARS, e, {??,??,??});
	assert(is_true(r.tainted));
	assert( r.ret == ??); //input-output example

    r = interpret(NUMVARS, e, {??,??,??});
	assert(is_true(r.tainted));
	assert( r.ret == ??); //input-output example*/
        
	//assert(interpret(3, e, {1,3,5}) == 9); //input-output example

}
