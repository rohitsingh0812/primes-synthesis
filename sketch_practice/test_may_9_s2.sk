#define NUMVARS 3
#define NODECUTOFF 12
#define MAXCONST 8
#define GENCALL(XX) gen_e(XX,num_nodes,cif, clt, cnum, cvar, cplus,cmult)
void PRINT_CONST(int x);
void PRINT_VAR(int id);
void PRINT_PLUS();
void PRINT_MULT();
void PRINT_LT();
void PRINT_IF();
adt expr{
    Num {int val;}
    Var {int id;}
    Plus {expr left; expr right;}
    Mult {expr left; expr right;}
    Lt {expr left; expr right;}
    Ite {expr e_if; expr e_then; expr e_else;}
    //Div {expr left; expr right;}
    //Sub {expr left; expr right;}
}

int interpret([int n], expr e, int[n] context){
	switch(e){
		case Num: return e.val;
		case Var: return context[e.id];
        case Plus: {
      		int left = interpret(e.left, context);
      		int right = interpret(e.right, context);
      		return left + right;  
        }
		case Mult: {
      		int left = interpret(e.left, context);
      		int right = interpret(e.right, context);
      		return left * right;  
        }
        case Lt: {
        	int left = interpret(e.left, context);
      		int right = interpret(e.right, context);
      		return left < right;  
        }
        case Ite: {
        	int val_if = interpret(e.e_if, context);
      		if(val_if > 0){
                return interpret(e.e_then, context);
      		}
      		else{
                return interpret(e.e_else, context);
      		}
        }
	}
}

generator expr gen_e(int depth, ref int num_nodes, ref int cif, ref int clt, ref int cnum, ref int cvar, ref int cplus, ref int cmult){
    assert(depth >= 0);
    assert(num_nodes <= NODECUTOFF);
    int stop = ??;
    if(depth == 0 || stop > 0){
        int choice = ??; 
        if(choice == 0){
            int v = (??)%MAXCONST;
            PRINT_CONST(v);
            cnum++;
            return new Num(val=v);
        }
        else{
            int id = (??)%NUMVARS;
            PRINT_VAR(id);
            cvar++;
            return new Var(id=id);
        }
    }
    else{
        int choice = ??; 
        if(choice == 0){
            PRINT_PLUS();
            num_nodes+=2;
            cplus++;
            return new Plus(left=GENCALL(depth-1),right=GENCALL(depth-1));
        }
        else if (choice ==1){
            PRINT_MULT();
            num_nodes+=2;
            cmult++;
            return new Mult(left=GENCALL(depth-1),right=GENCALL(depth-1));
        }
        else if (choice ==2){
            PRINT_LT();
            num_nodes+=2;
            clt++;
            return new Lt(left=GENCALL(depth-1),right=GENCALL(depth-1));
        }
        else{
            PRINT_IF();
            num_nodes+=3;
            cif++;
            return new Ite(e_if=GENCALL(depth-1),e_then=GENCALL(depth-1),e_else=GENCALL(depth-1));
        }
    }
}
void foo(int x);
harness void synthesize(){
    int nn = 0;
    int cif=0;int clt=0;int cnum=0;int cvar=0; int cplus = 0;int cmult=0;
	expr e = gen_e(2,nn,cif, clt, cnum, cvar,cplus,cmult); //AST of depth 2
	foo(nn);
	assert(cif == 1);
	assert(clt == 1);
	assert(cnum <= 2);
	assert(cvar <=6);
	//assert (nn == 5);
	assert(interpret(3, e, {??,??,??}) == ??); //input-output example
    assert(interpret(3, e, {??,??,??}) == ??); //input-output example
    assert(interpret(3, e, {??,??,??}) == ??); //input-output example
    
	//assert(interpret(3, e, {1,3,5}) == 9); //input-output example

}
